# каскадное присвоение
z=x=y=1
#групповое присвоение
z,x,y=3,4,5
# ввод данных, по умолчанию тип -строка
x=input('введите переменную х  ')
# ввод целого числа
x= int(input('введите переменную х  '))

# Доступ к элементам строки
x = "gfg25trtr"
s= x[::-1]
s= x[-1]
s= x[1:3]
s= x[-7:-3:1]
s= x[-3:-7:-1]
s= x[::2]
s= x[::-2]
s= x[:3]
s= x[3:]
# МЕТОДЫ СТРОК
# длина строки
a=len(x)
# нахождение номера символа перво попавшегося с начала строки
a=x.find('g')
# нахождение номера символа перво попавшегося с конца строки
a=x.rfind('g')
# замена в переменной х первого числа на второе и присвоение измененной переменной в а
a=x.replace('2','5')
# все по верхнему регистру
f=x.upper()
# все по нижнему регистру
z=f.lower()
# являются ли все знаки буквами , фолс - имеются цифры
v=z.isalpha()
# являются ли все знаки цифрами , фолс - имеются  буквы
v=z.isnumeric()
# операции над строками
#  сложение, умножение
d=x+'cvdgg'
d = x*2
# СПИСОК # доступ к элементам так же как и в строках
 sp=[1,2,4,'qwe',5]
 # ОПЕРАЦИИ со списками
# добавление к списку
sp.append(77)
# расширение списка
sp.extend([5,5,5,5,5,5])
# вставка в список на позицию 3 к примеру
sp.insert(3,'abraCadabra7')
# Удаление элемента по номеру
del sp[0:3]
del sp[1]
# удаление элемента по названию -только первого
sp.remove(5)
# операции над списками
# сложение и умножение
d=sp*2
d=sp+[5,8,9,99]
d=sp+[5,8,9,99,sp,z,'z']
# можно содавать списки списков -матрицы
s=[[1,2,3],[4,5,6],[7,8,9]]
#доступ к элементам списка
a=s[0][2]  # a=3
a=s[1][1]  # a=5
# Сравнение списков - так же как и со строками,
# сперва по длине, если длины равны, то потом поэлементно

# вхождение эл-та в список
s=[[1,2,3],[4,5,6],[7,8,9]]
5 in s[1] # true
5 in s# false

# список - объект и имеет свой айди в памяти
i=id(s)

# генератор списка
x= list(range(100))
x= list(range(80,100,5))# x=[80, 85, 90, 95] в случае рэйндж - применяем запятую - начало,конец, шаг

# методы списка уже было итд
s.append(5)
len(s)
s2= [1,2,3,4,5,6,7,8,9,10,11,12]
min (s2) # 1
max(s2) # 12
s2.insert(1,545)
s2.sort()
s2.pop()# Метод pop удаляет элемент по индексу. При этом возвращает удаленное из списка значение в программу.
s2[1]=300 # заменили первый элемент на 300
# Неизменяемые объекты
# строки -неизменяемые, списки - изменяемые
s2.append(100) #s2 изменит список - добавит в конец исло 100, со строкой это сделать не получится
# они очень похожи -список и строка, кроме изменяемости. Чтобы строку фиктивно
# изменить -нужно новую строку создавать и перезаписать связь -пересоздать объект

m=3
w=m
m+=1 # m= 4 w=3   m ривязалось к новому объекту, ибо числа - низменяемые, создают новый объект

 # КОРТЕЖ - то же самое, что и список, но неизменяемый
# если список в квадратных скобках, то кортеж -в круглых, кортеж -неизменяемый
t=(1,2,3,4,5)
type(t) #'tuple'
# доступ к элементам - все равно в квадратных скобках
t[1]# 2

t=t+(4,7,9)# объект не изменится, просто создастся новый объект, к которому прикрепится ссылка

# СЛОВАРИ достаем значения по ключу
# Словарь-изменяемый объект
b={}
type(b)#'dict'
b['mix']=15
b['m']=150 #{'mix': 15, 'm': 150}
z={'key1':'value1','key2':'value2'}
z['key1']#'value1'
# лучше ключи в одном списке делать одного типа
# список в качестве ключа использовать нельзя тк он изменяемый
# Словари нельзя складывать и умножать, но можно сравнивать

# Проверка вхождения - s по ключам
15 in b#15 in b
"mix" in b#"mix" in b

# n вернет шляпа если нет ключа 'v', либо значение по ключу в словарь не добавляет значени
n=b.get('v','shlyapa')

# ниже - в словарь добавляется значение по ключу, если его нет
n= b.setdefault('v','shlyapa') # n ='shlyapa'     b={'mix': 15, 'm': 150, 'v': 'shlyapa'}

# что можно делать?
# список списков, словарь сисков, словарь словарей, словарь словарей списков итд

# МНОЖЕСТВА
set1=set([1,2,3,4,5,6,21])
set2={2,3,4,5,6,8,9}
#объединение
set1|set2 #{1, 2, 3, 4, 5, 6, 8, 9, 21}
# пересечение (элементы которые есть и в первом и во втором)
set1&set2#{2, 3, 4, 5, 6}
# вычитание - попадают эл-ты из первого списка, которого нет во втором списке
set1-set2#{1, 21}
set2-set1#{8, 9}
set1.add(127)# добавление элемента. Есть много методов -